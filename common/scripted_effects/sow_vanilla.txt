get_artifact_quality_effect = {
	if = {
		limit = {
			NOT = { exists = scope:quality }
		}
		# Some random variance is added so artifact quality isn't completely deterministic
		if = {
			limit = {
				NOR = {
					exists = scope:inspiration_owner
					exists = scope:random_quality_bonus
				}
			}
			random_list = {
				20 = {
					save_scope_value_as = {
						name = random_quality_bonus
						value = 4
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_quality_bonus
						value = 8
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_quality_bonus
						value = 12
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_quality_bonus
						value = 16
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_quality_bonus
						value = 20
					} 
				}
			}
		}
		else_if = {
			limit = {
				NOT = { exists = scope:random_inspired_skill_quality_bonus }
			}
			random_list = {
				20 = {
					save_scope_value_as = {
						name = random_inspired_skill_quality_bonus
						value = 0.5
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_inspired_skill_quality_bonus
						value = 1
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_inspired_skill_quality_bonus
						value = 2
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_inspired_skill_quality_bonus
						value = 2.5
					} 
				}
				20 = {
					save_scope_value_as = {
						name = random_inspired_skill_quality_bonus
						value = 3
					} 
				}
			}
			save_scope_value_as = {
				name = random_quality_bonus
				value = 0
			}
		}

		# Calculate the final quality of the artifact
		save_scope_value_as = {
			name = quality
			value = {
				value = scope:random_quality_bonus

				# Bonus Quality from the Court Owner's Amenities
				if = {
					limit = {
						exists = court_owner
						court_owner = {
							has_royal_court = yes
							amenity_level = { type = court_lodging_standards value > low_amenity_level }
						}
					}
					if = {
						limit = { court_owner = { amenity_level = { type = court_lodging_standards value >= max_amenity_level } } }
						add = 10
					}
					else_if = {
						limit = { court_owner = { amenity_level = { type = court_lodging_standards value >= very_high_amenity_level } } }
						add = 8
					}
					else_if = {
						limit = { court_owner = { amenity_level = { type = court_lodging_standards value >= high_amenity_level } } }
						add = 6
					}
					else_if = {
						limit = { court_owner = { amenity_level = { type = court_lodging_standards value >= medium_amenity_level } } }
						add = 4
					}
					else = {
						add = 2
					}
				}

				# Bonus quality from Inspiration Owner
				if = {
					limit = { exists = scope:inspiration_owner }
					scope:inspiration_owner = {
						# Bonus quality from high skills, depending on inspiration type.
						add = {	
							if = {
								limit = { ep1_character_had_or_has_inspiration_type_trigger = { TYPE = armor } }
								value = armor_inspiration_average_skill_value
							}
							else_if = {
								limit = { ep1_character_had_or_has_inspiration_type_trigger = { TYPE = weapon } }
								value = weapon_inspiration_average_skill_value
							}
							else_if = {
								limit = { ep1_character_had_or_has_inspiration_type_trigger = { TYPE = adventure } }
								value = adventure_inspiration_average_skill_value
							}
							else_if = {
								limit = { ep1_character_had_or_has_inspiration_type_trigger = { TYPE = smith } }
								value = smith_inspiration_average_skill_value
							}
							else_if = {
								limit = { ep1_character_had_or_has_inspiration_type_trigger = { TYPE = book } }
								value = book_inspiration_average_skill_value
							}
							else_if = {
								limit = { ep1_character_had_or_has_inspiration_type_trigger = { TYPE = weaver } }
								value = weaver_inspiration_average_skill_value
							}
							else_if = {
								limit = { ep1_character_had_or_has_inspiration_type_trigger = { TYPE = artisan } }
								value = artisan_inspiration_average_skill_value
							}
							multiply = {
								value = quality_bonus_per_skill_level_value
								add = scope:random_inspired_skill_quality_bonus # Replaces the random_quality_bonus when an artifact is created by a character so that skill matters more
							}
						}

						# Bonus quality from Cultural Traditions
						if = {
							limit = {
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = weapon }
								culture = { has_cultural_parameter = improved_weapon_inspiration }
							}
							add = 20
						}
						if = {
							limit = {
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = artisan }
								culture = { has_cultural_parameter = improved_artisan_inspiration }
							}
							add = 20
						}
						if = {
							limit = {
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = weaver }
								culture = { has_cultural_parameter = improved_weaver_inspiration }
							}
							add = 20
						}

						# Bonus quality from event outcomes involving the Inspiration Owner
						if = {
							limit = { exists = var:artifact_quality }
							add = {
								value = var:artifact_quality
								multiply = 3
							}
						}

						# Cap on quality for 'local artisans', who should only produce lower quality artifacts
						if = {
							limit = {
								has_character_flag = local_artisan
							}
							max = {
								value = 20
								add = culture.demd_vigor_local_artisan_artifact_quality_max
							}
						}
						# Other inspiration owners get a small bonus in quality to help distinguish them from 'local artisans'
						else = {
							add = {
								value = 10
								add = culture.demd_vigor_artisan_quality_bonus
							}
						}
					}
					
					# Bonuses from Buildings
					if = { #Smiths line
						limit = {
							exists = court_owner
							court_owner = {
								any_directly_owned_province = {
									has_building_or_higher = smiths_05
								}
							}
						}
						court_owner = {
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = smiths_05
								}
								add = 2
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = smiths_06
								}
								add = 2
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = smiths_07
								}
								add = 2
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = smiths_08
								}
								add = 2
							}
						}
					}
					if = { #blacksmiths duchy building
						limit = {
							exists = court_owner
							court_owner = {
								any_directly_owned_province = {
									has_building_or_higher = blacksmiths_01
								}
							}
						}
						court_owner = {
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = blacksmiths_01
								}
								add = 4
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = blacksmiths_02
								}
								add = 8
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = blacksmiths_03
								}
								add = 12
							}
						}
					}
					if = { #caravanserai line
						limit = {
							exists = court_owner
							court_owner = {
								any_directly_owned_province = {
									has_building_or_higher = caravanserai_04
								}
							}
						}
						court_owner = {
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = caravanserai_04
								}
								add = 2
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = caravanserai_05
								}
								add = 2
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = caravanserai_06
								}
								add = 2
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = caravanserai_07
								}
								add = 2
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = caravanserai_08
								}
								add = 2
							}
						}
					}
					if = { #Wind Furnaces line
						limit = {
							exists = court_owner
							court_owner = {
								any_directly_owned_province = {
									has_building_or_higher = wind_furnace_04
								}
							}
							OR = {
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = armor }
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = weapon }
							}
						}
						court_owner = {
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = wind_furnace_04
								}
								add = 6
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = wind_furnace_05
								}
								add = 4
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = wind_furnace_06
								}
								add = 4
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = wind_furnace_07
								}
								add = 4
							}
							every_directly_owned_province = {
								limit = {
									has_building_or_higher = wind_furnace_08
								}
								add = 4
							}
						}
					}
					if = { # Universities boost Book Inspirations
						limit = {
							exists = court_owner
							court_owner = {
								any_directly_owned_province = {
									has_university_building_trigger = yes
								}
							}
							ep1_character_had_or_has_inspiration_type_trigger = { TYPE = book }
						}
						add = 20
					}
					if = { # Special Mines boost things significantly
						limit = {
							exists = court_owner
							court_owner = {
								any_directly_owned_province = {
									has_any_special_mine_trigger = yes
								}
							}
							OR = {
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = armor }
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = weapon }
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = smith }
								ep1_character_had_or_has_inspiration_type_trigger = { TYPE = artisan }
							}
						}
						add = 20
					}
				}

				#If it is worth bringing home from an adventure it is not common.
				if = {
					limit = {
						exists = scope:adventurer
					}
					add = 20
				}
				

				# Family Epic base quality 
				if = {
					limit = {
						exists = scope:owner
						scope:owner = { has_variable = commission_epic_quality }
					}
					add = scope:owner.var:commission_epic_quality
				}
				# Old Ledger should not be too fancy (stewardship_wealth.1061)
				if = {
					limit = {
						exists = scope:low_quality
					}
					max = 20
				}

				# Exotic Arms event
				if = {
					limit = { exists = scope:exotic_blade_quality }
					if = {
						limit = { scope:exotic_blade_quality = no }
						max = 20
					}
					else = { max = 60 }
				}

				# Can't have negative quality
				min = 1
			}
		}
	}
}

successful_popular_revolt_outcome_effect = {
	# Save scopes for later usage.
	$FACTION_LEADER$ = {
		joined_faction = {
			save_scope_as = popular_faction
			every_faction_member = {
				add_to_list = faction_members
			}
			faction_target = {
				save_scope_as = faction_target
			}
		}
	}

	# Compile a list of all counties belonging to the faction.
	scope:popular_faction = {
		every_faction_county_member = {
			add_to_list = siezed_counties
		}
	}
	# Additionally, if we're at war (and not just pressing demands), add all occupied counties and connected counties of the correct culture/faith.
	if = {
		limit = {
			$FACTION_LEADER$ = {
				is_at_war_with = scope:faction_target
			}
		}
		# Add all occupied counties of the correct culture/faith.
		scope:faction_target = {
			every_sub_realm_county = {
				limit = {
					county_controller = $FACTION_LEADER$
					faith = $FACTION_LEADER$.faith
				}
				add_to_list = siezed_counties
			}
		}
		
		every_in_list = {
			list = siezed_counties
			add_adjacent_valid_counties_to_list = {
				FAITH = $FACTION_LEADER$.faith
				TOP_LIEGE = scope:faction_target
				LIST = siezed_counties
			}
		}
		
		# And add any war members that aren't already in the faction.
		$FACTION_LEADER$ = {
			every_character_war = {
				limit = {
					is_defender = scope:faction_target
				}
				every_war_attacker = {
					limit = {
						NOT = { is_in_list = faction_members }
					}
					add_to_list = faction_members
				}
			}
		}
	}

	# Select a 'capital' county for the faction leader.
	scope:popular_faction = {
		ordered_faction_county_member = {
			order_by = {
				value = total_county_levies

				multiply = {
					value = 1

					# Up to 50% bonus points for counties of the correct culture/faith.
					if = {
						limit = { culture = $FACTION_LEADER$.culture }
						add = 0.25
					}
					if = {
						limit = { faith = $FACTION_LEADER$.faith }
						add = 0.25
					}

					# Additional 50% bonus points for counties located in the de jure area of the liege title we want to sieze.
					if = {
						limit = {
							target_is_de_jure_liege_or_above = $TARGET_TITLE$
						}
						add = 0.50
					}

					# Remove 75% for counties owned by a player.
					if = {
						limit = {
							holder = { is_ai = no }
						}
						subtract = 0.75
					}
				}
			}

			#remove_from_list = siezed_counties
			save_scope_as = capital_county
		}
	}

	# CHANGE ZERO: Give the leader a county to stop landless characters from screwing up the hierarchy.
	hidden_effect = {
		create_title_and_vassal_change = {
			type = conquest_populist
			save_scope_as = change_zero
			add_claim_on_loss = yes
		}
		scope:capital_county = {
			change_title_holder = {
				holder = $FACTION_LEADER$
				change = scope:change_zero
				take_baronies = no
			}
		}
		resolve_title_and_vassal_change = scope:change_zero
	}
	
	# Let's add in any additional counties belonging to other participants, which isn't part of the faction already, so that we can assign a kingdom/duchy tier title properly.
	# (We'll remove these again further down.)
	if = {
		limit = {
			any_in_list = {
				list = faction_members
				NOT = { this = $FACTION_LEADER$ }
			}
		}
		every_in_list = {
			list = faction_members
			limit = {
				NOT = { this = $FACTION_LEADER$ }
			}
			every_sub_realm_county = {
				limit = {
					NOT = { is_in_list = siezed_counties }
				}
				add_to_list = siezed_counties
			}
		}
	}

	# CHANGE ONE: Give the leader an appropriately-ranked title.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_one
		add_claim_on_loss = yes
	}
	if = {
		# Check if we can give them a kingdom.
		limit = {
			OR = {
				any_in_list = { # If the realm is large enough to make a duchy unfeasible.
					list = siezed_counties
					count >= 20
				}
				any_in_list = { # If there is a kingdom title available for creation/usurpation.
					list = siezed_counties
					kingdom = {
						any_de_jure_county = {
							percent >= 0.5
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target 

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}
							}
						}
						# Special block to stop populist factions from creating Germany if the HRE is still alive and kicking.
						NAND = {
							this = title:k_east_francia
							exists = title:e_hre.holder
						}
					}
				}
			}
		}

		# Check if we can create or usurp a De Jure Kingdom from the map
		every_in_list = {
			list = siezed_counties
			kingdom = {
				if = {
					limit = {
						any_de_jure_county = {
							percent >= 0.5
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target 

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}
							}
						}
						# Special block to stop populist factions from creating Germany if the HRE is still alive and kicking.
						NAND = {
							this = title:k_east_francia
							exists = title:e_hre.holder
						}
					}
					add_to_list = potential_kingdoms
				}
			}
		}

		# If we found one or more valid De Jure Kingdoms, pick the best one for us to take.
		if = {
			limit = {
				any_in_list = {
					list = potential_kingdoms
					count >= 1
					NAND = {
						this = title:k_east_francia
						exists = title:e_hre.holder
					}
				}
			}
			ordered_in_list = {
				list = potential_kingdoms
				limit = {
					NAND = {
						this = title:k_east_francia
						exists = title:e_hre.holder
					}
				}

				order_by = {
					value = 1
					every_in_list = {
						list = siezed_counties
						limit = { kingdom = prev }
						add = 1
					}
				}

				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
		# Otherwise, create a new titular Kingdom title.
		else = {
			create_popular_revolt_title_effect = {
				FACTION = scope:popular_faction
				FACTION_LEADER = $FACTION_LEADER$
				TIER = kingdom
			}
			scope:new_title = {
				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
	}

	else_if = {
		# Check if we can give them a duchy.
		limit = {
			OR = {
				any_in_list = { # If the realm is large enough to make a county as the highest tier unfeasible.
					list = siezed_counties
					count >= 8
				}
				any_in_list = { # If there is a duchy title available for creation/usurpation.
					list = siezed_counties
					duchy = {
						any_de_jure_county = {
							percent >= 0.5
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target
			
								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}
			
								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}
							}
						}
					}
				}
			}
		}

		# Check if we can create or usurp a De Jure Duchy from the map
		every_in_list = {
			list = siezed_counties
			duchy = {
				if = {
					limit = {
						any_de_jure_county = {
							percent >= 0.4
							is_in_list = siezed_counties
						}
						OR = {
							NOT = { exists = holder }
							trigger_if = {
								limit = { exists = holder }
								holder.top_liege = scope:faction_target

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
										NOT = { holder = holder.top_liege }
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}
							}
						}
					}
					add_to_list = potential_duchies
				}
			}
		}

		# If we found one or more valid De Jure Duchies, pick the best one for us to take.
		if = {
			limit = {
				any_in_list = {
					list = potential_duchies
					count >= 1
				}
			}
			ordered_in_list = {
				list = potential_duchies

				order_by = {
					value = 1
					every_in_list = {
						list = siezed_counties
						limit = { duchy = prev }
						add = 1
					}
				}

				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
		# Otherwise, create a new titular Duchy title.
		else = {
			create_popular_revolt_title_effect = {
				FACTION = scope:popular_faction
				FACTION_LEADER = $FACTION_LEADER$
				TIER = duchy
			}
			scope:new_title = {
				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
	}

	# If the new realm is too small, or is unable to take/create a higher tier title, the populist leader only gets the county titles themselves.
	resolve_title_and_vassal_change = scope:change_one

	# If the title we gave our leader is a new dynamic title, generate a CoA for it.
	if = {
		limit = {
			exists = scope:new_title
		}
		scope:new_title = {
			set_capital_county = scope:capital_county
			generate_coa = yes
		}
	}

	# CHANGE TWO: Transfer the siezed counties to the leader.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_two
		add_claim_on_loss = yes
	}
	if = { # But remove counties from any faction/war member first.
		limit = {
			any_in_list = {
				list = faction_members
				NOT = { this = $FACTION_LEADER$ }
			}
		}
		every_in_list = {
			list = faction_members
			limit = {
				NOT = { this = $FACTION_LEADER$ }
			}
			every_sub_realm_county = {
				remove_from_list = siezed_counties
			}
		}
	}
	every_in_list = {
		list = siezed_counties
		
		change_title_holder = {
			holder = $FACTION_LEADER$
			change = scope:change_two
			take_baronies = no
		}
	}
	resolve_title_and_vassal_change = scope:change_two

	# CHANGE THREE: Split the leader off into an independent realm. Then make all faction members vassals of the populist leader.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_three
		add_claim_on_loss = yes
	}
	every_in_list = {
		list = faction_members

		# Lower-ranked vassals switch lieges to the faction leader.
		if = {
			limit = {
				this.primary_title.tier < $FACTION_LEADER$.primary_title.tier
				this.primary_title.tier >= tier_county
				NOT = { this = $FACTION_LEADER$ }
			}
			change_liege = {
				liege = $FACTION_LEADER$
				change = scope:change_three
			}
		}
		# Same or higher-ranked vassal get independence.
		else_if = {
			limit = {
				NOT = { this = $FACTION_LEADER$ }
			}
			hidden_effect = {
				becomes_independent = {
					change = scope:change_three
				}
				send_interface_toast = {
					title = POPULIST_FACTION_INDEPENDENCE_TITLE
					custom_tooltip = POPULIST_FACTION_INDEPENDENCE_DESC
					left_icon = $FACTION_LEADER$
					right_icon = scope:faction_target
				}
			}
		}
	}

	resolve_title_and_vassal_change = scope:change_three

	# Sub-change: if any counties have been offended by HumSac'ing, since they're revolting, and tempers have hit fever pitch, remove their county opinion malus.
	$FACTION_LEADER$ = { fp1_remove_humsac_offended_counties_effect = yes }

	# CHANGE FOUR: If there are any disconnected counties, split them off via exclave independence rules.
	# However. We don't do this if there is a player in the faction, since it can remove land from the player, or in worst case, make the player game over.
	if = {
		limit = {
			NOT = {
				any_in_list = {
					list = faction_members
					is_ai = no
				}
			}
		}
		scope:capital_county = {
			split_noncontiguous_counties_from_revolt_effect = {
				FACTION_LEADER = $FACTION_LEADER$
			}
		}
	}
	
	# If the faction still exists, dissolve it (it's no longer relevant).
	hidden_effect = {
		if = {
			limit = {
				exists = scope:popular_faction
			}
			scope:popular_faction = {
				destroy_faction = yes
			}
		}
	}

	# Set up government type correctly.
	hidden_effect = {
		$FACTION_LEADER$ = {
			#If sourced from tribal, make tribal.
			if = {
				limit = {
					$SOURCE_GOVERNMENT$ = { government_has_flag = government_is_tribal }
				}
				change_government = tribal_government
				add_realm_law = tribal_authority_0
				if = { limit = { has_realm_law = crown_authority_0 } remove_realm_law = crown_authority_0 }
				if = { limit = { has_realm_law = crown_authority_1 } remove_realm_law = crown_authority_1 }
				if = { limit = { has_realm_law = crown_authority_2 } remove_realm_law = crown_authority_2 }
				if = { limit = { has_realm_law = crown_authority_3 } remove_realm_law = crown_authority_3 }
			}
		}
	}
	
	# Give the leader some gold if they don't have any - We do this at the very end to make sure the gold is applied correctly.
	hidden_effect = {
		if = {
			limit = {
				$FACTION_LEADER$ = {
					gold < 10
				}
			}
			every_in_list = { # Scale the amount on the number of counties taken.
				list = siezed_counties
				$FACTION_LEADER$ = {
					add_gold = 50
				}
			}
		}
	}
}

spawn_popular_revolt_troops = {
	# Spawn Levies
	spawn_army = {
		levies = {
			value = 0
			joined_faction = {
				every_faction_county_member = {
					limit = {
						duchy = scope:local_center_of_rebellion.duchy
					}
					add = county_levies_to_raise
				}
			}
		}
		location = scope:local_center_of_rebellion
		war = root.faction_war
		name = populist_faction_event_troops
	}
	
	# Spawn MAAs - An appropriate amount of troops dependent on the culture of the counties they spawn from
	scope:local_center_of_rebellion = {
		if = { limit = { culture = { culture_has_archer_cavalry_maa = yes } }
			prev = {
				spawn_army = {
					men_at_arms = { type = horse_archers stacks = { value = center_of_rebellion_maa_to_raise multiply = 0.5 ceiling = yes } }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else_if = { limit = { culture = { culture_has_heavy_cavalry_maa = yes } }
			prev = {
				spawn_army = {
					men_at_arms = { type = armored_horsemen stacks = { value = center_of_rebellion_maa_to_raise multiply = 0.5 ceiling = yes } }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else_if = { limit = { culture = { culture_has_light_cavalry_maa = yes } }
			prev = {
				spawn_army = {
					men_at_arms = { type = light_horsemen stacks = center_of_rebellion_maa_to_raise }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else_if = { limit = { culture = { culture_has_heavy_infantry_maa = yes } }
			prev = {
				spawn_army = {
					men_at_arms = { type = armored_footmen stacks = center_of_rebellion_maa_to_raise }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else_if = { limit = { culture = { culture_has_pikemen_maa = yes } }
			prev = {
				spawn_army = {
					men_at_arms = { type = pikemen_unit stacks = center_of_rebellion_maa_to_raise }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else_if = { limit = { culture = { culture_has_archer_maa = yes } }
			prev = {
				spawn_army = {
					men_at_arms = { type = bowmen stacks = center_of_rebellion_maa_to_raise }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else = {
			prev = {
				spawn_army = {
					men_at_arms = { type = light_footmen stacks = center_of_rebellion_maa_to_raise }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		
		# Spawn Siege Weapons depending on discovered innovations
		if = {
			limit = { culture = { has_innovation = innovation_bombard } }
			prev = {
				spawn_army = {
					men_at_arms = { type = bombard stacks = 1 }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else_if = {
			limit = { culture = { has_innovation = innovation_trebuchet } }
			prev = {
				spawn_army = {
					men_at_arms = {  type = trebuchet stacks = 1 }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
			
		}
		else_if = {
			limit = { culture = { has_innovation = innovation_mangonel } }
			prev = {
				spawn_army = {
					men_at_arms = { type = mangonel stacks = 1 }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
		else_if = {
			limit = { culture = { has_innovation = innovation_catapult } }
			prev = {
				spawn_army = {
					men_at_arms = { type = onager stacks = 1 }
					location = scope:local_center_of_rebellion
					war = root.faction_war
					name = populist_faction_event_troops
				}
			}
		}
	}
}

peasant_faction_demands_enforced = {
	$FACTION$ = {
		every_faction_county_member = {
			custom = peasant_faction_every_county
			change_county_control = peasant_war_victory_county_control_loss
			if = {
				limit = { var:tax_setting > 2 }
				demd_decrement_edict_setting = { TYPE = tax }
			}
			add_county_modifier = {
				modifier = peasant_war_lost_county_modifier
				years = 10
			}
		}
		hidden_effect = {
			clean_revolt_county_modifiers_from_faction_members_effect = yes
			destroy_faction = yes
		}
	}
}