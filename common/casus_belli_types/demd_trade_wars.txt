demd_trade_vassalization_cb = {
	icon = trade_war
	group = vassalization
	ai_only_against_neighbors = yes
	
	allowed_for_character = {
		OR = {
			any_character_struggle = {
				involvement = involved
				has_struggle_phase_parameter = demd_can_force_vassalize_strategic_county_holders
			}
			any_character_struggle = {
				involvement = interloper
				has_struggle_phase_parameter = demd_can_force_vassalize_strategic_county_holders
			}
		}
	}

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender

	allowed_against_character_display_regardless = {
		scope:defender = {
			custom_description = {
				text = "vassalization_cb_target_too_many_counties"
				subject = scope:defender
				NOT = {
					any_sub_realm_county = {
						count > vassalization_size_limit
					}
				}
			}
		}
	}
	
	allowed_against_character = {
		scope:defender = {
			is_independent_ruler = yes
			trigger_if = {
				limit = { scope:attacker = { is_ai = no } } # Already pre-filtered by the AI due to ai_only_against_neighbors = yes. any_neighboring_top_liege_realm_owner is expensive
				scope:attacker = {
					any_neighboring_top_liege_realm_owner = {
						this = scope:defender
					}
				}
			}
			
			any_sub_realm_county = {
				OR = {
					has_county_modifier = demd_strategic_location
					has_county_modifier = demd_trade_linkage
				}
				var:trade_node = scope:attacker.capital_county.var:trade_node
			}

			NOR = { # Can't vassalize holy orders or Heads of Faith
				any_held_title = {
					is_holy_order = yes
				}
				AND = {
					exists = faith.religious_head
					faith.religious_head = root
				}
			}
		}
		
		scope:attacker.primary_title.tier > scope:defender.primary_title.tier # Must be lower tier
		
	}
	
	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			add = {
				desc = CB_SIZE_OF_TARGET_REALM_COST
				scope:defender = {
					every_sub_realm_county = {
						add = {
							value = 125
						}
					}
				}
			}
			if = {
				limit = {
					scope:defender.primary_title = {
						tier = tier_kingdom
					}
				}
				multiply = {
					value = 2
					desc = CB_VASSALIZING_KING
				}
			}

			multiply = common_cb_prestige_cost_multiplier
		}
	}
	
	should_invalidate = {
		OR = {
			scope:defender = {
				is_independent_ruler = no
			}
			scope:defender.primary_title.tier >= scope:attacker.primary_title.tier
		}
	}
	
	on_declaration = {
		on_declared_war = yes
	}	
	
	on_invalidated_desc = msg_vassalization_war_invalidated_message
	
	on_invalidated = {}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = vassalization_cb_victory_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = vassalization_cb_victory_desc_defender
			}
			desc = vassalization_cb_victory_desc
		}
	}
	
	on_victory = {
		demd_vigor_attacker_victory_effect_no_target = yes
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:defender = {
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
		
		
		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = medium_prestige_value
			}
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
		
		# Truce
		add_truce_attacker_victory_effect = yes
				
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = vassalization_cb_white_peace_desc_defender
			}
			desc = vassalization_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
		
		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = vassalization_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = vassalization_cb_defeat_desc_attacker
			}
			desc = vassalization_cb_white_peace_desc
		}
	}
	
	on_defeat = {
		demd_vigor_defender_victory_effect_no_target = yes
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
		
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "VASSALIZATION_WAR_NAME"
	war_name_base = "VASSALIZATION_WAR_NAME_BASE"
	cb_name = "VASSALIZATION_CB_NAME"
	interface_priority = 59
	
	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 500

	ai_score_mult = {
		value = 1
	}
}


demd_claim_strategic_trade_county = {
	group = trade
	icon = trade_war # TODO_ART: Make naval invasion icon (something generic that can be reused, involving boats)

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = { 
		scope:attacker = {
			OR = {
				any_character_struggle = {
					involvement = involved
					has_struggle_phase_parameter = demd_can_claim_strategic_trade_county
				}
				any_character_struggle = {
					involvement = interloper
					has_struggle_phase_parameter = demd_can_claim_strategic_trade_county
				}
			}
		}
	}

	allowed_against_character = {
		scope:attacker = {
			has_opinion_modifier = { target = scope:defender modifier = raided_my_trade_opinion }
		}
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}
	target_titles = all
	target_title_tier = county
	ignore_effect = change_title_holder

	ai_can_target_all_titles = { can_use_viking_invasion_cbs_trigger = yes }
	ai_score_mult = {
		value = viking_conquest_ai_score_value
		multiply = struggle_wars_prioritise_struggle_targets_value # AI in struggles act insularly for wars that don't have a familial or legal basis.
	}

	valid_to_start = {
		scope:target = {
			OR = {
				has_county_modifier = demd_strategic_location
				has_county_modifier = demd_trade_linkage
			}
			var:trade_node = scope:attacker.capital_county.var:trade_node
		}
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	on_invalidated = {}

	cost = {
		prestige = {
			value = 300
			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_declaration = { on_declared_war = yes }

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}

	on_victory = {
		demd_vigor_attacker_victory_effect_target = yes
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		#As this is just a county conquest, simply grab the designated county.
		every_in_list = {
			list = target_titles
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = minor_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = { # Prestige loss for the attacker
			add_prestige = {
				value = minor_prestige_value
				multiply = -2.5
				round = yes
			}
			stress_impact = {
 				ambitious = major_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
 				arrogant = minor_stress_impact_gain
 			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		demd_vigor_defender_victory_effect_target = yes
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }
		scope:attacker = { 
			show_pow_release_message_effect = yes
			pay_short_term_gold_reparations_effect = { # Prestige loss for the attacker
				GOLD_VALUE = 2
			}
			add_prestige = {
				value = medium_prestige_value
				multiply = -3.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = minor_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = { save_temporary_scope_as = loser }
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = no
	defender_allies_inherit = yes

	war_name = "CONQUEST_WAR_NAME"
	war_name_base = "CONQUEST_WAR_NAME_BASE"
	cb_name = "demd_claim_strategic_trade_county"

	interface_priority = 79

	use_de_jure_wargoal_only = no

	attacker_wargoal_percentage = 0.95
}

demd_contest_trade_node_ownership = {
	icon = trade_war
	group = trade
	
	allowed_for_character = {
	}
	allowed_against_character = {
		scope:attacker = {
			any_character_struggle = {
				has_variable = is_trade_node_struggle
				var:node_owner = scope:defender
			}
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}
	
	on_declaration = {
		on_declared_war = yes
	}
	
	cost = {
		prestige = {
			value = 0
			add = {
				value = medium_prestige_value
				desc = CB_BASE_COST
			}
			if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Culture
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_cultural_parameter = cheaper_cbs
						}
					}
				}
				multiply = {
					value = 0.8
					desc = "CB_ATTACKER_CULTURE"
				}
			}
			multiply = {
				value = scope:attacker.culture.demd_vigor_CB_cost_modifier
				desc = "[vigor|E]"
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:defender = { is_local_player = yes }
				}
				desc = trade_node_war_victory_desc_defender
			}
			desc = trade_node_war_victory_desc
		}
	}
	
	on_victory = {
		demd_vigor_attacker_victory_effect_no_target = yes
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		
		scope:attacker = {
			every_character_struggle = {
				limit = {
					has_variable = is_trade_node_struggle
					var:node_owner = scope:defender
				}
				save_scope_as = struggle
			}
		}
		scope:defender = {
			every_character_struggle = {
				limit = {
					has_variable = is_trade_node_struggle
					var:node_owner = scope:defender
				}
				demd_transfer_trade_node_ownership_war = yes
			}
		}
		
		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		desc = artifact_war_white_peace_desc
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		desc = artifact_war_defeat_desc
	}
	
	on_defeat = {
		demd_vigor_defender_victory_effect_no_target = yes
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }
		scope:attacker = {
			show_pow_release_message_effect = yes
		}

		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
	}
	
	should_invalidate = {
	}
	
	on_invalidated = {
	}
	
	on_invalidated_desc = {
		desc = punitive_expedition_war_invalidated_desc
	}
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "TRADE_NODE_WAR_NAME_FALLBACK"
	cb_name_no_target = "TRADE_NODE_WAR_NAME_FALLBACK"
	
	interface_priority = 1000
	
	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 500
	
	should_show_war_goal_subview = no
	
	ai_score = {
		value = 10
	}
}